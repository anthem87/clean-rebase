#!/usr/bin/env bash

# Script: git-rebase-clean
# Usage:
#   git rebase-clean                         → auto-detect base branch and squash/rebase
#   git rebase-clean -r my-branch            → rebase from a specific branch
#   git rebase-clean -sm "custom message"    → use a custom commit message
#   git rebase-clean -r branch -sm "msg"     → customize both base branch and message
#   git rebase-clean --continue              → resumes after conflict resolution
#   git rebase-clean -h / --help             → shows help message

set -e

# Repo-local state file
STATE_FILE=$(git rev-parse --git-path .rebase-clean-state)

# Defaults
baseBranch=""
squashMsg="feat: complete work (squash)"
is_continue=false

function print_help {
  cat <<EOF

USAGE:
  git rebase-clean                          Squash and rebase onto upstream (or origin/develop fallback)
  git rebase-clean -r branch                Specify the base branch
  git rebase-clean -sm "msg"               Specify the squash commit message
  git rebase-clean -r branch -sm "msg"     Customize both branch and message
  git rebase-clean --continue              Resume after conflicts
  git rebase-clean -h / --help             Show this help message

EOF
  exit 0
}

function continue_after_rebase {
  if [ ! -f "$STATE_FILE" ]; then
    echo "No rebase-clean state found to continue."
    exit 1
  fi

  currentBranch=$(cat "$STATE_FILE")
  rm -f "$STATE_FILE"

  echo "Continuing rebase-clean on original branch: $currentBranch"

  git checkout "$currentBranch"
  git reset --hard temp-rebase-clean
  echo "Branch $currentBranch updated with clean commit."

  git push --force-with-lease origin "$currentBranch"
  echo "Forced push executed."

  git branch -D temp-rebase-clean
  echo "Temporary branch removed."

  echo "Operation completed successfully."
  exit 0
}

# Parse arguments
while [[ $# -gt 0 ]]; do
  case "$1" in
    --continue)
      is_continue=true
      shift
      ;;
    -r)
      baseBranch="$2"
      shift 2
      ;;
    -sm)
      squashMsg="$2"
      shift 2
      ;;
    -h|--help)
      print_help
      ;;
    *)
      echo "Unknown argument: $1"
      print_help
      ;;
  esac
done

# Handle resume
if $is_continue; then
  continue_after_rebase
fi

# Auto-detect base branch if not provided
if [ -z "$baseBranch" ]; then
  baseBranch=$(git rev-parse --abbrev-ref @{u} 2>/dev/null || true)
  if [ -z "$baseBranch" ]; then
    baseBranch=$(git symbolic-ref --short refs/remotes/origin/HEAD 2>/dev/null | sed 's@^origin/@@')
    baseBranch="origin/${baseBranch:-develop}"
  fi
fi

# Validate base branch existence
if ! git show-ref --verify --quiet "refs/remotes/$baseBranch" && \
   ! git show-ref --verify --quiet "refs/heads/$baseBranch"; then
  echo "Error: base branch '$baseBranch' not found."
  echo "Please specify a valid branch with:  -r <branch-name>"
  exit 1
fi

echo "Using base branch: $baseBranch"

currentBranch=$(git rev-parse --abbrev-ref HEAD)
echo "Current branch: $currentBranch"

# Remove temp branch if it exists
if git rev-parse --verify --quiet temp-rebase-clean >/dev/null; then
  git branch -D temp-rebase-clean
fi

# Create temp branch from current HEAD
git checkout -b temp-rebase-clean
echo "Created temporary branch: temp-rebase-clean"

# Find merge base and reset soft to squash
base=$(git merge-base "$baseBranch" HEAD)
echo "Base with $baseBranch: $base"

git reset --soft "$base"

# Commit if there’s something staged
if git diff --cached --quiet; then
  echo "Nothing to commit. Aborting."
  git checkout "$currentBranch"
  git branch -D temp-rebase-clean
  exit 1
fi

git commit -m "$squashMsg"
echo "Single commit created with message: \"$squashMsg\""

git fetch origin
echo "Fetch from origin done."

echo "Starting rebase on $baseBranch..."
if ! git rebase "$baseBranch"; then
  echo ""
  echo "Conflict during rebase!"
  echo "Resolve conflicts, then:"
  echo "  git add <files>"
  echo "  git rebase --continue"
  echo "  git rebase-clean --continue"
  echo ""
  echo "Saving state to continue after resolution."

  echo "$currentBranch" > "$STATE_FILE"
  exit 1
fi

# Finalize
git checkout "$currentBranch"
git reset --hard temp-rebase-clean
echo "Branch $currentBranch updated with clean commit."

git push --force-with-lease origin "$currentBranch"
echo "Forced push executed."

git branch -D temp-rebase-clean
echo "Temporary branch removed."

rm -f "$STATE_FILE"
echo "Operation completed successfully."